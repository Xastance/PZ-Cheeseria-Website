{"ast":null,"code":"const API_BASE_URL = \"http://localhost:3001\"; // Update this to your backend URL if different\n\n// Get all cheeses\nexport const getAllCheeses = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/cheeses`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.data;\n  } catch (error) {\n    console.error(\"Failed to fetch cheeses:\", error);\n    throw error;\n  }\n};\n\n// Get a specific cheese by ID\nexport const getCheeseById = async id => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/cheeses/${id}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.data;\n  } catch (error) {\n    console.error(`Failed to fetch cheese with ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Create a new cheese (used for admin purposes)\nexport const createCheese = async cheeseData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/cheeses`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(cheeseData)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.message;\n  } catch (error) {\n    console.error(\"Failed to create cheese:\", error);\n    throw error;\n  }\n};\n\n// Update an existing cheese by ID\nexport const updateCheese = async (id, cheeseData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/cheeses/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(cheeseData)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.message;\n  } catch (error) {\n    console.error(`Failed to update cheese with ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Soft delete a cheese by ID (marks it as inactive)\nexport const deleteCheese = async id => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/cheeses/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.message;\n  } catch (error) {\n    console.error(`Failed to delete cheese with ID ${id}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","getAllCheeses","response","fetch","ok","Error","status","data","json","error","console","getCheeseById","id","createCheese","cheeseData","method","headers","body","JSON","stringify","message","updateCheese","deleteCheese"],"sources":["C:/Users/xasta/OneDrive/Desktop/PZ-Cheeseria-Website/pz-cheeseria-frontend/src/api/cheeseApi.js"],"sourcesContent":["const API_BASE_URL = \"http://localhost:3001\"; // Update this to your backend URL if different\r\n\r\n// Get all cheeses\r\nexport const getAllCheeses = async () => {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/cheeses`);\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        return data.data;\r\n    } catch (error) {\r\n        console.error(\"Failed to fetch cheeses:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Get a specific cheese by ID\r\nexport const getCheeseById = async (id) => {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/cheeses/${id}`);\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        return data.data;\r\n    } catch (error) {\r\n        console.error(`Failed to fetch cheese with ID ${id}:`, error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Create a new cheese (used for admin purposes)\r\nexport const createCheese = async (cheeseData) => {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/cheeses`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(cheeseData)\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        return data.message;\r\n    } catch (error) {\r\n        console.error(\"Failed to create cheese:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Update an existing cheese by ID\r\nexport const updateCheese = async (id, cheeseData) => {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/cheeses/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(cheeseData)\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        return data.message;\r\n    } catch (error) {\r\n        console.error(`Failed to update cheese with ID ${id}:`, error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Soft delete a cheese by ID (marks it as inactive)\r\nexport const deleteCheese = async (id) => {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/cheeses/${id}`, {\r\n            method: 'DELETE'\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        return data.message;\r\n    } catch (error) {\r\n        console.error(`Failed to delete cheese with ID ${id}:`, error);\r\n        throw error;\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}